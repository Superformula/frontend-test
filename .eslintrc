{
	"plugins": ["react", "prettier", "react-hooks"],
	"env": {
		"browser": true,
		"commonjs": true,
		"es6": true,
		"node": true
	},
	"parserOptions": {
		"ecmaVersion": 6,
		"sourceType": "module",
		"ecmaFeatures": {
			"globalReturn": true,
			"impliedStrict": true,
			"jsx": true,
			"experimentalObjectRestSpread": true
		}
	},
	"rules": {
		"prettier/prettier": [
			"error",
			{
				"singleQuote": true,
				"trailingComma": "none",
				"bracketSpacing": true,
				"jsxBracketSameLine": false,
				"parser": "babel",
				"useTabs": true,
				"tabWidth": 4,
				"printWidth": 120,
				"semi": true
			}
		],

		"comma-dangle": ["warn", "never"], // disallow or enforce trailing commas
		"no-cond-assign": ["error", "except-parens"], // disallow assignment in conditional expressions
		"no-console": "warn", // disallow use of console (off by default in the node environment)
		"no-constant-condition": "error", // disallow use of constant expressions in conditions
		"no-control-regex": "error", // disallow control characters in regular expressions
		"no-debugger": "error", // disallow use of debugger
		"no-dupe-args": "error", // disallow duplicate arguments in functions
		"no-dupe-keys": "error", // disallow duplicate keys when creating object literals
		"no-duplicate-case": "error", // disallow a duplicate case label.
		"no-empty": "error", // disallow empty statements
		"no-empty-character-class": "error", // disallow the use of empty character classes in regular expressions
		"no-ex-assign": "error", // disallow assigning to the exception in a catch block
		"no-extra-boolean-cast": "error", // disallow double-negation boolean casts in a boolean context
		"no-extra-parens": "off", // disallow unnecessary parentheses (off by default)
		"no-extra-semi": "error", // disallow unnecessary semicolons
		"no-func-assign": "error", // disallow overwriting functions written as function declarations
		"no-inner-declarations": "error", // disallow function or variable declarations in nested blocks
		"no-invalid-regexp": "error", // disallow invalid regular expression strings in the RegExp constructor
		"no-irregular-whitespace": "error", // disallow irregular whitespace outside of strings and comments
		"no-negated-in-lhs": "error", // disallow negation of the left operand of an in expression
		"no-obj-calls": "error", // disallow the use of object properties of the global object (Math and JSON) as functions
		"no-regex-spaces": "error", // disallow multiple spaces in a regular expression literal
		"no-sparse-arrays": "error", // disallow sparse arrays
		"no-unreachable": "error", // disallow unreachable statements after a return, throw, continue, or break statement
		"use-isnan": "error", // disallow comparisons with the value NaN
		"valid-jsdoc": "error", // Ensure JSDoc comments are valid (off by default)
		"valid-typeof": "error", // Ensure that the results of typeof are compared against a valid string

		//
		// Best Practices
		//
		// These are rules designed to prevent you from making mistakes.
		// They either prescribe a better way of doing something or help you avoid footguns.
		//
		"block-scoped-var": "off", // treat var statements as if they were block scoped (off by default). "off": deep destructuring is not compatible https://github.com/eslint/eslint/issues/1863
		"complexity": "off", // specify the maximum cyclomatic complexity allowed in a program (off by default)
		"consistent-return": "warn", // require return statements to either always or never specify values
		"curly": ["error", "multi-line"], // specify curly brace conventions for all control statements
		"default-case": "error", // require default case in switch statements (off by default)
		"dot-notation": "error", // encourages use of dot notation whenever possible
		"eqeqeq": "error", // require the use of === and !==
		"guard-for-in": "off", // make sure for-in loops have an if statement (off by default)
		"no-alert": "error", // disallow the use of alert, confirm, and prompt
		"no-caller": "error", // disallow use of arguments.caller or arguments.callee
		"no-div-regex": "error", // disallow division operators explicitly at beginning of regular expression (off by default)
		"no-else-return": "error", // disallow else after a return in an if (off by default)
		"no-eq-null": "error", // disallow comparisons to null without a type-checking operator (off by default)
		"no-eval": "error", // disallow use of eval()
		"no-extend-native": "error", // disallow adding to native types
		"no-extra-bind": "error", // disallow unnecessary function binding
		"no-fallthrough": "error", // disallow fallthrough of case statements
		"no-floating-decimal": "error", // disallow the use of leading or trailing decimal points in numeric literals (off by default)
		"no-implied-eval": "error", // disallow use of eval()-like methods
		"no-iterator": "error", // disallow usage of __iterator__ property
		"no-labels": "error", // disallow use of labeled statements
		"no-lone-blocks": "error", // disallow unnecessary nested blocks
		"no-loop-func": "error", // disallow creation of functions within loops
		"no-multi-spaces": "error", // disallow use of multiple spaces
		"no-multi-str": "error", // disallow use of multiline strings
		"no-native-reassign": "error", // disallow reassignments of native objects
		"no-new": "error", // disallow use of new operator when not part of the assignment or comparison
		"no-new-func": "error", // disallow use of new operator for Function object
		"no-new-wrappers": "error", // disallows creating new instances of String, Number, and Boolean
		"no-octal": "error", // disallow use of octal literals
		"no-octal-escape": "error", // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \"error"51";
		"no-param-reassign": "error", // disallow reassignment of function parameters (off by default)
		"no-process-env": "error", // disallow use of process.env (off by default)
		"no-proto": "error", // disallow usage of __proto__ property
		"no-redeclare": "error", // disallow declaring the same variable more then once
		"no-return-assign": "error", // disallow use of assignment in return statement
		"no-script-url": "error", // disallow use of javascript: urls.
		"no-self-compare": "error", // disallow comparisons where both sides are exactly the same (off by default)
		"no-sequences": "error", // disallow use of comma operator
		"no-throw-literal": "error", // restrict what can be thrown as an exception (off by default)
		"no-unused-expressions": "error", // disallow usage of expressions in statement position
		"no-void": "error", // disallow use of void operator (off by default)
		"no-warning-comments": ["warn", { "terms": ["todo", "fixme"], "location": "anywhere" }], // disallow usage of configurable warning terms in comments": "error", // e.g. TODO or FIXME (off by default)
		"no-with": "error", // disallow use of the with statement
		"radix": "error", // require use of the second argument for parseInt() (off by default)
		"vars-on-top": "error", // requires to declare all vars on top of their containing scope (off by default)
		"wrap-iife": "error", // require immediate function invocation to be wrapped in parentheses (off by default)
		"yoda": ["error", "never"], // require or disallow Yoda conditions

		//
		// Strict Mode
		//
		// These rules relate to using strict mode.
		//
		"strict": "off", // controls location of Use Strict Directives. "off": required by `babel-eslint`

		//
		// Variables
		//
		// These rules have to do with variable declarations.
		//
		"no-catch-shadow": "error", // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
		"no-delete-var": "error", // disallow deletion of variables
		"no-label-var": "error", // disallow labels that share a name with a variable
		"no-shadow": "error", // disallow declaration of variables already declared in the outer scope
		"no-shadow-restricted-names": "error", // disallow shadowing of names such as arguments
		"no-undef": "error", // disallow use of undeclared variables unless mentioned in a /*global */ block
		"no-undef-init": "error", // disallow use of undefined when initializing variables
		"no-undefined": "error", // disallow use of undefined variable (off by default)
		"no-unused-vars": "error", // disallow declaration of variables that are not used in the code
		"no-use-before-define": "error", // disallow use of variables before they are defined

		//
		// Stylistic Issues
		//
		// These rules are purely matters of style and are quite subjective.
		//
		"brace-style": ["warn", "1tbs"], // enforce one true brace style (off by default)
		"camelcase": "warn", // require camel case names
		"comma-spacing": ["warn", { "before": false, "after": true }], // enforce spacing before and after comma
		"comma-style": ["warn", "last"], // enforce one true comma style (off by default)
		"consistent-this": ["error", "_this"], // enforces consistent naming when capturing the current execution context (off by default)
		"eol-last": "error", // enforce newline at the end of file, with no multiple empty lines
		"func-names": "off", // require function expressions to have a name (off by default)
		"func-style": "off", // enforces use of function declarations or expressions (off by default)
		"key-spacing": ["error", { "beforeColon": false, "afterColon": true }], // enforces spacing between keys and values in object literal properties
		"keyword-spacing": ["warn", { "after": true }], // require 1 space after keyword
		"max-nested-callbacks": "off", // specify the maximum depth callbacks can be nested (off by default)
		"new-cap": ["warn", { "newIsCap": true, "capIsNew": false }], // require a capital letter for constructors
		"new-parens": "error", // disallow the omission of parentheses when invoking a constructor with no arguments
		"newline-after-var": "off", // allow/disallow an empty newline after var statement (off by default)
		"no-array-constructor": "warn", // disallow use of the Array constructor
		"no-inline-comments": "warn", // disallow comments inline after code (off by default)
		"no-lonely-if": "warn", // disallow if as the only statement in an else block (off by default)
		"no-mixed-spaces-and-tabs": "off", // disallow mixed spaces and tabs for indentation
		"no-multiple-empty-lines": ["warn", { "max": 2 }], // disallow multiple empty lines (off by default)
		"no-nested-ternary": "error", // disallow nested ternary expressions (off by default)
		"no-new-object": "warn", // disallow use of the Object constructor
		"no-spaced-func": "warn", // disallow space between function identifier and application
		"no-ternary": "off", // disallow the use of ternary operators (off by default)
		"no-trailing-spaces": "error", // disallow trailing whitespace at the end of lines
		"no-underscore-dangle": "warn", // disallow dangling underscores in identifiers
		"one-var": ["warn", "never"], // allow just one var statement per function (off by default)
		"operator-assignment": ["warn", "never"], // require assignment operator shorthand where possible or prohibit it entirely (off by default)
		"padded-blocks": ["warn", "never"], // enforce padding within blocks (off by default)
		"quote-props": ["warn", "as-needed"], // require quotes around object literal property names (off by default)
		"quotes": ["error", "single", "avoid-escape"], // specify whether double or single quotes should be used
		"semi": ["error", "always"], // require or disallow use of semicolons instead of ASI
		"semi-spacing": ["error", { "before": false, "after": true }], // enforce spacing before and after semicolons
		"sort-vars": "off", // sort variables within the same declaration block (off by default)
		"space-before-blocks": ["error", "always"], // require or disallow space before blocks (off by default)
		"space-in-parens": ["warn", "never"], // require or disallow spaces inside parentheses (off by default)
		"space-infix-ops": ["error"], // require spaces around operators
		"space-unary-ops": ["error", { "words": true, "nonwords": false }], // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
		"wrap-regex": "off", // require regex literals to be wrapped in parentheses (off by default)
		"prefer-const": "warn",
		"no-const-assign": "error",
		//
		// ECMAScript 6
		//
		// These rules are only relevant to ES6 environments and are off by default.
		//
		"no-var": "error", // require let or const instead of var (off by default)
		//"generator-star-spacing": ["error", "before"], // enforce the spacing around the * in generator functions (off by default)

		//
		// eslint-plugin-react
		//
		// React specific linting rules for ESLint
		//
		"react/display-name": "off", // Prevent missing displayName in a React component definition
		"react/jsx-no-undef": "error", // Disallow undeclared variables in JSX
		"react/jsx-sort-props": "off", // Enforce props alphabetical sorting
		"react/jsx-uses-react": "error", // Prevent React to be incorrectly marked as unused
		"react/jsx-uses-vars": "error", // Prevent variables used in JSX to be incorrectly marked as unused
		"react/no-did-mount-set-state": "error", // Prevent usage of setState in componentDidMount
		"react/no-did-update-set-state": "error", // Prevent usage of setState in componentDidUpdate
		"react/no-multi-comp": "off", // Prevent multiple component definition per file
		"react/no-unknown-property": "error", // Prevent usage of unknown DOM property
		"react/prop-types": "error", // Prevent missing props validation in a React component definition
		"react/react-in-jsx-scope": "error", // Prevent missing React when using JSX
		"react/self-closing-comp": "error", // Prevent extra closing tags for components without children
		"react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
		"react-hooks/exhaustive-deps": "warn" // Checks effect dependencies
	}
}
